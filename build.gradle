plugins {
	id 'java'
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.github.node-gradle.node' version '3.3.0' // node base의 front-end 코드를 하나의 jar 파일로 빌드하기 위한 플러그인 추가
}

group = 'com.fastcampus'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

node {	// node의 정보 설정
	nodeModulesDir = file("$projectDir/front-end")
	version='18.3.0'
	download=true
}

task npmBuild(type:NpmTask) {	// react를 빌드할 때 사용하는 tool
	args=['run', 'build']
}

task copyFrontEnd(type:Copy) {	// 빌드된 front-end 파일들을 resources 하위 static 폴더에 넣음
	from "$projectDir/front-end/static"
	into 'build/resources/main/static/.'
}

task cleanFrontEnd(type:Delete) {	// clean이 일어날때 front-end도 함께 삭제
	delete "$projectDir/front-end/static", "$projectDir/front-end/node_modules"
}

npmBuild.dependsOn npmInstall
copyFrontEnd.dependsOn npmBuild
compileJava.dependsOn copyFrontEnd

clean.dependsOn cleanFrontEnd
